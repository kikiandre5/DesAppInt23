@* Pages/Estudiantes.razor *@
@page "/estudiantes"
@inject EstudianteServicio estudianteServicio
@inject IJSRuntime jsRuntime
<h3>Estudiantes</h3>
<NavLink class="nav-link" href="estudiante/agregar">
<span class="oi oi-plus" aria-hidden="true">Agregar estudiante</span>
</NavLink>
<label>Buscar estudiante:</label>
<input type="text" @oninput="@( (e) => Filtro(e) )">
<div class="row">
<div class="col-md-10">
<table class="table table-hover">
<thead>
<tr>
<th>Nombre</th>
<th>Apeido</th>
<th>Fecha Inscripcion</th>
<th>Nombre Completo</th>
<th>Acci√≥n</th>
</tr>
</thead>
<tbody>
@foreach (var estudiante in estudiantes) {
<tr>
<td>@estudiante.Nombre</td>
<td>@estudiante.Apeido</td>
<td>@estudiante.FechaInscripcion.ToString("dd-MMM-yyyy")</td>
<td>@estudiante.NombreCompleto</td>

@if(estudiante.Inscripciones.Count==0) {
<td>-sin inscripciones-</td>
} else {
<td>
@foreach(var insc in estudiante.Inscripciones) {
    @insc.Curso.CursoId @:- @insc.Curso.Titulo <br />
    }
    </td>
}
<td>

<a href="estudiante/editar/@estudiante.Id" class="btn btn-success">Editar</a>

<a class="btn btn-danger" @onclick="async ()=> await
Borrar(estudiante)">Borrar</a>
</td>
</tr>
}
</tbody>
</table>
</div>
</div>
@code {
private List<Estudiante> estudiantes = new();
protected override void OnInitialized() {
estudiantes = estudianteServicio.ObtenerTodo("");
}
private async Task Borrar(Estudiante estudiante) {
bool confirmed = await jsRuntime.InvokeAsync<bool>("confirm", "Estas seguro????");
if (confirmed)
if(estudianteServicio.Borrar(estudiante.Id))
estudiantes.Remove(estudiante);

}
protected void Filtro(ChangeEventArgs e) {
string cadenabuscar = e.Value.ToString();
estudiantes = estudianteServicio.ObtenerTodo(cadenabuscar);
}
}